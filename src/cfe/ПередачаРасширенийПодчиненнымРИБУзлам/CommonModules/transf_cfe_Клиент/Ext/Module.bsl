// Copyright 2020 Aleksandr Cegel'nikov

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//   http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#Область ПрограммныйИнтерфейс

Процедура ПроверитьИОбновитьРасширениеКонфигурации(ПроцессорОбмена) Экспорт

	// ПроцессорОбмена - WS-ссылка с установленным соединением
	
	ПоддержкаЗащитыОтОпасныхДействий = ДоступнаЗащитаОтОпасныхДействий(); // Проверим, поддерживает ли платформа защиту от опасных действий
	
	Попытка
		
		МассивОбновляемыхРасширений = Новый Массив;
		Расширения = РасширенияКонфигурации.Получить(); // Получаем список установленных расширений
		
		Для Каждого Расширение из Расширения Цикл
			
			МассивОбновляемыхРасширений.Добавить(Новый Структура("Имя, УникальныйИдентификатор, ХешСумма", Расширение.Имя, Расширение.УникальныйИдентификатор, Расширение.ХешСумма));
			
		КонецЦикла;
		
		Если МассивОбновляемыхРасширений.Количество() <= 0 Тогда // Если расширений в базе нет, добавляем в список "предопределенное" расширение, наше основное
			
			МассивОбновляемыхРасширений.Добавить(Новый Структура("Имя, УникальныйИдентификатор, ХешСумма", "Экстра", Неопределено, Неопределено));
			
		ИначеЕсли ОбменДаннымиСервер.ТребуетсяУстановкаОбновления() Тогда
			
			// Расширение уже есть, но сейчас требуется обновление конфигурации, по этому не будем пока обновлять расширение.
			// Сделано так, чтоб при первом запуске из начального образа базы, даже если есть изменения конфигурации,
			// расширение бы скачалось и установилось, а если расширение есть, то не качаем его пока не применим изменения.
			
		КонецЕсли;
		
		Для Каждого Расширение из МассивОбновляемыхРасширений Цикл
			
			Результат = Неопределено;
			ВходящиеДанные = Неопределено;
			
			// Делаем запрос к веб-сервису
			СообщениеОбмена = ПроцессорОбмена.GetExtandedConfig(Расширение.Имя, Base64Строка(Расширение.ХешСумма), Результат, ВходящиеДанные);
			
			Если Результат и Не ПустаяСтрока(СообщениеОбмена) Тогда
				
				// Получили положительный ответ и что не было сообщений, а так-же проверим, получили ли мы сами данные
				Если ВходящиеДанные = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе 
				
				Сообщить("При получении обновления расширения: " + Расширение.Имя + " была получена ошибка: " + СообщениеОбмена);
				Продолжить;
				
			КонецЕсли;
			
			ДанныеРасширения = ВходящиеДанные.Получить(); // Получаем двоичные данные из хранилища значения
			
			// Получены данные расширения, обработаем
			Если Расширение.УникальныйИдентификатор = Неопределено Тогда // Расширение ещё не установлено
				
				РасширениеВБазе = РасширенияКонфигурации.Создать(); // Создаем новое расширение
				РасширениеВБазе.БезопасныйРежим = Ложь;
				
				Если ПоддержкаЗащитыОтОпасныхДействий Тогда
					
					РасширениеВБазе.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь; // Отключаем защиту от опасных действий если поддерживается
					
				КонецЕсли;
				
			Иначе // Получаем уже установленное расширинение старой версии
				
				Раширения = РасширенияКонфигурации.Получить(Новый Структура("УникальныйИдентификатор", Расширение.УникальныйИдентификатор));
				
				Если Расширения.Количество() > 0 Тогда
					
					РасширениеВБазе = Расширения[0];
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если РасширениеВБазе = Неопределено Тогда
				
				Сообщить("При обновлении раширения произошла ошибка, не удалось получить расширение: " + Расширение.Имя);
				Продолжить;
				
			КонецЕсли;
			
			// Проверим, можно ли без ошибок применить расширение
			ОшибкиВРасширении = РасширениеВБазе.ПроверитьВозможностьПрименения(ДанныеРасширения); // Возвращает ИнформацияОПроблемеПримененияРасширенияКонфигурации
			
			Если ОшибкиВРасширении.Количество() > 0 Тогда
				
				Сообщить("При проверке расширения " + Расширение.Имя + ", возникли ошибки:");
				
				// Покажем полный список ошибок
				Для Каждого Ошибка из ОшибкиВРасширении Цикл
					
					Сообщить("(" + Ошибка.Важность + ") " + Расширение.Имя + ": " + Ошибка.Описание);
					
				КонецЦикла;
				
				// Не будем его устанавливать
				Продолжить;
				
			КонецЕсли;
			
			// Всё хорошо! Обновляем расширение!
			РасширениеВБазе.Записать(ДанныеРасширения);
			Сообщить("Успешно обновлено расширение: " + Расширение.Имя + ", получена версия: " + РасширениеВБазе.Версия);
			
		КонецЦикла;
		
	Исключение
		
		Сообщить("Ошибка в процедуре обновления расширения: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДоступнаЗащитаОтОпасныхДействий() Экспорт

	СисИнфо = Новый СистемнаяИнформация;
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СисИнфо.ВерсияПриложения, "8.3.9.2033") >= 0;

КонецФункции // ДоступнаЗащитаОтОпасныхДействий()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти



